{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAEpD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EACtDC,EAAAvB,GAASwB,OAAOC,QAAQ,yCAEtB,IAAG,IAAIC,EAAI,EAAGA,EAAIP,EAAOG,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAASC,OAAOZ,EAAMK,OAASJ,EAAKI,MAAQI,EAElDxB,EAAcyB,EAAUC,GACrBE,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBmB,EAAAvB,GAASwB,OAAOO,QACd,uBAAqB5B,QAAiBC,MAAU,IAGnD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBmB,EAAAvB,GAASwB,OAAOS,QACd,sBAAoB9B,QAAiBC,MAAU,G,CAMzDW,EAAMK,cAAcc,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n/*\n\nTarea 3 - Generador de promises\n\nEjecute esta tarea en los archivos 03-promises.html y 03-promises.js.\n\nEl HTML tiene un diseño de formulario en el que el usuario introducirá \nel primer retraso en milisegundos, el paso de incremento de retraso \npara cada promise después de primero y el número de promises a crear.\n\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n\nEscriba un script que llame a la función cuando se envíe el formulario \ncreatePromise(position, delay) tantas veces como se haya introducido \nen el espacio amount. En cada vez que se llama, pasa el número del \npagaré (posición) y el retraso considerando el primer retardo (delay) \ny el paso (step) introducidos por el usuario.\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\nComplete el código de la función createPromise para que devuelva \npromise, que se ejecuta o se rechaza después de un \"retraso\" de tiempo. \nEl valor de promise debe ser un objeto que tendrá las propiedades position \ny delay con valores de parámetros del mismo nombre. Use el código inicial \nde la función para seleccionar lo que se debe hacer con promise: ejecutarla \no rechazarla.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nBiblioteca de notificaciones\nATENCIÓN\nLa siguiente funcionalidad no es obligatoria a la hora de entregar un trabajo, \npero sería una buena práctica adicional.\n\nPara mostrar las notificaciones al usuario en lugar de console.log() use \nla biblioteca notiflix.\n\nEXPLICACIÓN\n\n1. Se importa la biblioteca Notiflix para mostrar notificaciones.\n\n2. Se selecciona el formulario HTML con la clase \"form\".\n\n3. Se agrega un event listener al formulario para el evento \"submit\" \nque llama a la función \"onSubmitForm\".\n\n4. La función \"onSubmitForm\" se ejecuta cuando se envía el formulario.\n\n5. Se obtienen los valores de los campos de entrada del formulario.\n\n6. Si alguno de los valores es menor que cero, se muestra una notificación \nde advertencia.\n\n7. Si todos los valores son positivos, se ejecuta un bucle que crea promesas \ny las maneja.\n\n8. La función \"createPromise\" crea una nueva promesa que se resuelve o se \nrechaza después de un retraso determinado.\n\n9. Cuando una promesa se resuelve, se muestra una notificación de éxito. \nCuando una promesa se rechaza, se muestra una notificación de fallo.\n\n10. Se restablecen los valores del formulario después de enviarlo.\n*/\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","Notify","warning","i","position1","delays","Number","then","success","catch","failure","reset"],"version":3,"file":"03-promises.7115a00a.js.map"}