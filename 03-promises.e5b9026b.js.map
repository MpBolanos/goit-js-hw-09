{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA1CMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAErB,GAAIF,EAAMG,MAAQ,GAAKF,EAAKE,MAAQ,GAAKD,EAAOC,MAAQ,EACtDC,EAAAxB,GAASyB,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,EAAIL,EAAOC,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACbE,EAASC,OAAOV,EAAMG,OAASF,EAAKE,MAAQI,EAElDzB,EAAc0B,EAAUC,GACrBE,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBoB,EAAAxB,GAASyB,OAAOQ,QACd,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGjD+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBoB,EAAAxB,GAASyB,OAAOW,QACd,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAMvDW,EAAMG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n/*\n\nTarea 3 - Generador de promises\n\nEjecute esta tarea en los archivos 03-promises.html y 03-promises.js.\n\nEl HTML tiene un diseño de formulario en el que el usuario introducirá \nel primer retraso en milisegundos, el paso de incremento de retraso \npara cada promise después de primero y el número de promises a crear.\n\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n\nEscriba un script que llame a la función cuando se envíe el formulario \ncreatePromise(position, delay) tantas veces como se haya introducido \nen el espacio amount. En cada vez que se llama, pasa el número del \npagaré (posición) y el retraso considerando el primer retardo (delay) \ny el paso (step) introducidos por el usuario.\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\nComplete el código de la función createPromise para que devuelva \npromise, que se ejecuta o se rechaza después de un \"retraso\" de tiempo. \nEl valor de promise debe ser un objeto que tendrá las propiedades position \ny delay con valores de parámetros del mismo nombre. Use el código inicial \nde la función para seleccionar lo que se debe hacer con promise: ejecutarla \no rechazarla.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nBiblioteca de notificaciones\nATENCIÓN\nLa siguiente funcionalidad no es obligatoria a la hora de entregar un trabajo, \npero sería una buena práctica adicional.\n\nPara mostrar las notificaciones al usuario en lugar de console.log() use \nla biblioteca notiflix.\n\nEXPLICACIÓN\n\n1. Se importa la biblioteca Notiflix para mostrar notificaciones.\n\n2. Se selecciona el formulario HTML con la clase \"form\".\n\n3. Se agrega un event listener al formulario para el evento \"submit\" \nque llama a la función \"onSubmitForm\".\n\n4. La función \"onSubmitForm\" se ejecuta cuando se envía el formulario.\n\n5. Se obtienen los valores de los campos de entrada del formulario.\n\n6. Si alguno de los valores es menor que cero, se muestra una notificación \nde advertencia.\n\n7. Si todos los valores son positivos, se ejecuta un bucle que crea promesas \ny las maneja.\n\n8. La función \"createPromise\" crea una nueva promesa que se resuelve o se \nrechaza después de un retraso determinado.\n\n9. Cuando una promesa se resuelve, se muestra una notificación de éxito. \nCuando una promesa se rechaza, se muestra una notificación de fallo.\n\n10. Se restablecen los valores del formulario después de enviarlo.\n*/\n\n\n/*\n\nTarea 2 - Cuenta regresiva\nEjecute esta tarea en los archivos 02-timer.html y 02-timer.js. \nEscriba un temporizador de script que cuente hasta una fecha determinada. \nEste temporizador podría usar en blogs y tiendas online, páginas de registro \nde eventos, durante trabajos de mantenimiento, etc.\n\nElementos de interconexión\nEl HTML tiene un diseño de temporizador predefinido, un campo de selección \nde la fecha de finalización y un botón que, al hacer clic, debe iniciar el \ntemporizador, para activar el temporizador. Añada un diseño mínimo de elementos \nde la interfaz.\n\n<input type=\"text\" id=\"datetime-picker\" />\n<button type=\"button\" data-start>Start</button>\n\n<div class=\"timer\">\n  <div class=\"field\">\n    <span class=\"value\" data-days>00</span>\n    <span class=\"label\">Days</span>\n  </div>\n  <div class=\"field\">\n    <span class=\"value\" data-hours>00</span>\n    <span class=\"label\">Hours</span>\n  </div>\n  <div class=\"field\">\n    <span class=\"value\" data-minutes>00</span>\n    <span class=\"label\">Minutes</span>\n  </div>\n  <div class=\"field\">\n    <span class=\"value\" data-seconds>00</span>\n    <span class=\"label\">Seconds</span>\n  </div>\n</div>\n\nBiblioteca flatpickr\nUse la biblioteca flatpickr para permitir al usuario multipliar la fecha y \nla hora de finalización en un solo elemento de interfaz. Para poder \nintroducir el código CSS de la biblioteca en el proyecto, es necesario \nañadir otro importe además del descrito en la documentación.\n\n// Descrito en la documentación\nimport flatpickr from \"flatpickr\";\n// Importación adicional de estilos\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nLa biblioteca espera ser inicializada en el elemento input[type=\"text\"], \npor lo que hemos añadido un espacio input#datetime-picker al documento HTML.\n\n<input type=\"text\" id=\"datetime-picker\" />\n\nEl segundo argumento de la función flatpickr(selector, options) se puede \npasar un objeto parámetro opcional. Hemos preparado para usted el objeto \nque necesita para hacer el trabajo. Descubra qué hace cada propiedad en la \nDocumentación «Options» y úselo en su código.\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n  },\n};\n\nSelección de fecha\nEl método onClose() del objeto parámetro es llamado cada vez que el \nelemento de interfaz que crea el flatpickr. Aquí es donde debería \nmanejar fecha seleccionada por el usuario. El parámetro selectedDates \nes un array de fechas seleccionadas, así que tomamos el primer elemento.\n\nSi el usuario ha seleccionado una fecha en el pasado, window.alert() \nnos mostra junto el texto \"Please choose a date in the future\".\nSi el usuario ha seleccionado una fecha válida (en el futuro), \nel botón «Start» se convierte en activo.\nEl botón «Start» no debe estar activo hasta que el usuario haya \nseleccionado la fecha en el futuro.\nAl pulsar el botón «Start» se inicia la cuenta regresiva hasta \nla fecha seleccionada desde el momento en que se pulsa.\nCuenta regresiva del tiempo\nCuando se pulsa el botón «Start», el script debe calcular una \nvez por segundo cuánto tiempo queda hasta la fecha especificada \ny actualiza la interfaz del temporizador para mostrar cuatro \ndígitos: días, horas, minutos y segundos en el formato xx:xx:xx:xx.\n\nEl número de días puede constar de más de dos dígitos.\nEl temporizador debe detenerse cuando llegue a la fecha \nde finalización, es decir 00:00:00:00.\nHAGÁMOSLO MÁS FÁCIL\nSi el temporizador está en marcha, para seleccionar una \nnueva fecha y reiniciarlo, es necesario recargar la página.\n\nPara calcular los valores, use la función preparada convertMs, \ndonde ms es la diferencia entre la fecha de finalización y \nla fecha actual en milisegundos.\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nFormato de tiempo\nLa función convertMs() devuelve un objeto con el tiempo restante calculado \nhasta la fecha final. Tenga en cuenta que no formatea el resultado. Es decir, \nsi hay 4 minutos o cualquier otro componente de tiempo, la función devolverá 4, no 04. En la interfaz del temporizador, debe añadirse 0 si el número tiene menos de dos personajes. Escriba una función addLeadingZero(value) que use el padStart() y formatee el valor antes de renderizar el interframe.\n\nBiblioteca de notificaciones\nATENCIÓN\nLa siguiente funcionalidad no es obligatoria a la hora de entregar un trabajo, \npero sería una buena práctica adicional.\n\nPara mostrar notificaciones al usuario en lugar de window.alert() use la biblioteca notiflix.\n\n\nEXPLICACIÓN\n\nEste código implementa temporizador que utiliza la biblioteca \"flatpickr\" \npara seleccionar una fecha y hora. Una vez que se elige una fecha posterior \na la actual, se activa un botón que al hacer clic inicia un temporizador que \nmuestra el tiempo restante en días, horas, minutos y segundos.\n\n1. Se importa la biblioteca \"flatpickr\" y sus estilos, así como la biblioteca \n\"notiflix\" para mostrar notificaciones.\n\n2. Se obtienen referencias a los elementos del DOM necesarios para el \nfuncionamiento del temporizador.\n\n3. Se inicializa el componente \"flatpickr\" para el selector de fecha y hora, \nconfigurando diversas opciones.\n\n4. Cuando se cierra el selector de fecha y hora, se verifica si la fecha \nseleccionada es posterior a la fecha actual. Si es así, se habilita el botón \nde inicio y se muestra una notificación de éxito. De lo contrario, se \ndeshabilita el botón y se muestra una notificación de error.\n\n5. Al hacer clic en el botón de inicio, se activa el temporizador. Se deshabilita \nel botón y el selector de fecha y hora para evitar cambios durante el temporizador.\n\n6. En cada intervalo de 1 segundo, se calcula el tiempo restante en días, horas, \nminutos y segundos a partir de la fecha seleccionada. Estos valores se actualizan \nen los elementos del DOM correspondientes.\n\n7. Cuando el tiempo restante es menor a 1 segundo, se detiene el temporizador, \nse habilita nuevamente el selector de fecha y hora y se aplican estilos visuales \nindicando que ha finalizado.\n\n*/"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","$parcel$interopDefault","Notify","warning","i","position1","delays","Number","then","param","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.e5b9026b.js.map"}